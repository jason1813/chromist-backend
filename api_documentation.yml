openapi: '3.0.2'
info:
  title: Chromist API
  version: '1.0'
servers:
  - url: https://api.server.test/v1

security:
  - api_key: []
  - petstore_auth:
      - "write:pets"
      - "read:pets"

paths:
  /threads:
    get:
      description:
        return the comments on specified page number with specified amount of threads to return.
      operationId: findThreads
      parameters:
        - name: pageNumber
          in: query
          description: The page number of which to grab threads from
          required: false
          schema:
            type: integer
            format: int32
        - name: threadsPerPage
          in: query
          description: The amount of threads to be shown on each page (max of 100)
          required: false
          schema:
            type: integer
            format: int32
            maximum: 100
            minimum: 1
      responses:
        '200':
          description: threads response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Thread'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /threads/{threadID}/comments:
    get:
      description:
        return the comments on a given thread
      operationId: findCommentsOnThread
      parameters:
        - name: startIndex
          in: query
          description: The start index from where to grab comments from
          required: false
          schema:
            type: integer
            format: int32
        - name: count
          in: query
          description: The number of comments to return
          required: false
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: comments response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      description:
        Post a new comment on a thread
      operationId: postComment
      parameters:
      - name: threadID
        in: path
        description: ID of thread to add comment to
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                name:
                  description: Text for comment to add to the thread
                  type: string


  # /pet/{petId}/uploadImage:
  #   post:
  #     tags:
  #     - pet
  #     summary: uploads an image
  #     operationId: uploadFile
  #     parameters:
  #     - name: petId
  #       in: path
  #       description: ID of pet to update
  #       required: true
  #       style: simple
  #       explode: false
  #       schema:
  #         type: integer
  #         format: int64
  #     requestBody:
  #       content:
  #         multipart/form-data:
  #           schema:
  #             $ref: '#/components/schemas/body_1'

      responses:
        '200':
          description: threads response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Thread'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    User:
      type: object
      required:
        - id
        - username
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string

    Comment:
      type: object
      required:
        - id
        - dateCreated
        - author
        - content
        - replies
        - replyCount
        - deleted
        - upvoteScore
      properties:
        id:
          type: integer
          format: int64
        dateCreated:
          type: string
          format: date-time
        author:
          $ref: '#/components/schemas/User'
        content:
          type: string
        replies:
          type: array
          items:
            $ref: '#/components/schemas/User'
        replyCount:
          type: integer
          format: int32
        deleted:
          type: boolean
        upvoteScore:
          type: integer
          format: int32
        userUpvoted:
          type: boolean
      
    Thread:
      type: object
      required:
        - id
        - dateCreated
        - author
        - title
        - description
        - numberOfComments
        - upvoteScore
      properties:
        id:
          type: integer
          format: int64
        dateCreated:
          type: string
          format: date-time
        author:
          $ref: '#/components/schemas/User'
        title:
          type: string
        description:
          type: string
        numberOfComments:
          type: integer
          format: int32
        upvoteScore:
          type: integer
          format: int32

    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
