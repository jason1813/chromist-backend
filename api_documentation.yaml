openapi: '3.0.2'
info:
  title: Chromist API
  version: '1.0'
servers:
  - url: https://api.server.test/v1

paths:
  /threads:
    get:
      tags:
        - Threads
      description:
        Return the threads on specified page number with specified amount of threads to return.
      operationId: findThreads
      parameters:
        - name: pageNumber
          in: query
          description: The page number of which to grab threads from
          required: false
          schema:
            type: integer
            format: int32
        - name: threadsPerPage
          in: query
          description: The amount of threads to be shown on each page (max of 100)
          required: false
          schema:
            type: integer
            format: int32
            maximum: 100
            minimum: 1
      responses:
        '200':
          description: Threads response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Thread'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      tags:
        - Threads
      security:
        - bearerAuth: []
      description:
        Post a new thread
      operationId: postThread
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                title:
                  description: Text for the title of the new thread
                  type: string
                description:
                  description: Text for the description of the new thread
                  type: string
        required: true
      responses:
        '200':
          description: new thread response
          content:
            application/json:
              schema:
                schema:
                $ref: '#/components/schemas/Thread'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /threads/{threadID}/comments:
    get:
      tags:
        - Threads
      description:
        Return the comments on a given thread
      operationId: findCommentsOnThread
      parameters:
        - name: startIndex
          in: query
          description: The start index from where to grab comments from
          required: false
          schema:
            type: integer
            format: int32
        - name: count
          in: query
          description: The number of comments to return
          required: false
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: comments response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - Threads
      security:
        - bearerAuth: []
      description:
        Post a new comment on a thread
      operationId: postComment
      parameters:
      - name: threadID
        in: path
        description: ID of thread to add comment to
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                text:
                  description: Text for comment to add to the thread
                  type: string
      responses:
        '200':
          description: comment response
          content:
            application/json:
              schema:
                schema:
                $ref: '#/components/schemas/Comment'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /threads/{threadID}/upvote:
    post:
      tags:
        - Threads
      security:
        - bearerAuth: []
      description: 
        Set upvote value on thread
      operationId: upvoteThread
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/upvote'
      responses:
        '200':
          description: Thread successfully voted!
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /comments/{commentID}/replies:
    get:
      tags:
        - Comments
      description:
        Return up to a specified amount of replies on a comment starting at specified start index.
      operationId: findReplies
      parameters:
        - name: commentID
          in: path
          description: ID of comment to get replies from
          required: true
          schema:
            type: integer
            format: int64
        - name: startIndex
          in: query
          description: first index for which replies on the comment to grab from
          required: false
          schema:
            type: integer
            format: int32
            default: 0
        - name: count
          in: query
          description: The amount of replies to pull (max = 20)
          required: false
          schema:
            type: integer
            format: int32
            maximum: 20
            minimum: 1
            default: 5
      responses:
        '200':
          description: replies response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - Comments
      security:
        - bearerAuth: []
      description:
        Post a new reply on a comment
      operationId: postReply
      parameters:
      - name: commentID
        in: path
        description: ID of comment to add reply to
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                text:
                  description: Text for reply to add to the comment
                  type: string
      responses:
        '200':
          description: reply response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /comments/{commentID}/upvote:
    post:
      tags:
        - Comments
      security:
        - bearerAuth: []
      description: 
        Set upvote value on comment
      operationId: upvoteComment
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/upvote'
      responses:
        '200':
          description: Comment successfully voted!
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /comments/{commentID}:
    delete:
      tags:
        - Comments
      description:
        Delete specified comment
      operationId: deleteComment
      parameters:
        - name: commentID
          in: path
          description: ID of comment to terminate
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Comment successfully deleted!
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/tokens:
    post:
      tags:
        - Auth
      description:
        Sign up a new user
      operationId: signupUser
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                username:
                  description: username of the new user
                  type: string
                hashedPassword:
                  description: hashed password for the new user
                  type: string
        required: true
      responses:
        '200':
          description: New user successfully created!
          content:
            application/json:
              schema:
                type: object
                properties:
                  newUser:
                    $ref: '#/components/schemas/User'
                  token:
                    type: string
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    get:
      tags:
        - Auth
      description:
        Log user in
      operationId: loginUser
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                username:
                  type: string
                hashedPassword:
                  type: string
        required: true
      responses:
        '200':
          description: User logged in!
          content:
            application/json:
              schema:
                type: object
                properties:
                  User:
                    $ref: '#/components/schemas/User'
                  token:
                    type: string
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      tags:
        - Auth
      security:
      - bearerAuth: []
      description:
        Log user out
      operationId: logoutUser
      responses:
        '200':
          description: User logged out successfully
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    User:
      type: object
      required:
        - id
        - username
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string

    Comment:
      type: object
      required:
        - id
        - dateCreated
        - author
        - content
        - replies
        - replyCount
        - deleted
        - upvoteScore
      properties:
        id:
          type: integer
          format: int64
        dateCreated:
          type: string
          format: date-time
        author:
          $ref: '#/components/schemas/User'
        text:
          type: string
        replies:
          type: array
          items:
            $ref: '#/components/schemas/User'
        replyCount:
          type: integer
          format: int32
        deleted:
          type: boolean
        upvoteScore:
          type: integer
          format: int32
        userUpvoted:
          type: boolean
      
    Thread:
      type: object
      required:
        - id
        - dateCreated
        - author
        - title
        - description
        - numberOfComments
        - upvoteScore
      properties:
        id:
          type: integer
          format: int64
        dateCreated:
          type: string
          format: date-time
        author:
          $ref: '#/components/schemas/User'
        title:
          type: string
        description:
          type: string
        numberOfComments:
          type: integer
          format: int32
        upvoteScore:
          type: integer
          format: int32

    upvote:
      type: object
      properties:
        upvoteSelection: 
          type: string
          enum:
            - up
            - down
            - neutral

    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
